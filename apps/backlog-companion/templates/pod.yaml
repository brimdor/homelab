apiVersion: v1
kind: Pod
metadata:
  name: backlog-companion
  labels:
    app: backlog-companion
spec:
  containers:
    - name: database
      image: {{ .Values.image.database }}
      imagePullPolicy: Always
      env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_ROOT_PASSWORD.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_ROOT_PASSWORD.key }}"
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_DATABASE.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_DATABASE.key }}"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_USER.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_USER.key }}"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_PASSWORD.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_PASSWORD.key }}"
      ports:
        - containerPort: 3306
      volumeMounts:
        - name: db-nfs
          mountPath: /var/lib/mysql
      readinessProbe:
        exec:
          command:
            - sh
            - -c
            - 'mariadb-admin ping -h localhost -uroot -p"$MYSQL_ROOT_PASSWORD"'
        initialDelaySeconds: 10
        periodSeconds: 10
    - name: backend
      image: {{ .Values.image.backend }}
      imagePullPolicy: Always
      env:
        - name: HOST_URL
          value: {{ .Values.env.HOST_URL | quote }}
        - name: CORS_ORIGIN
          value: {{ .Values.env.HOST_URL | quote }}
        - name: DB_HOST
          value: {{ .Values.env.DB_HOST | quote }}
        - name: DB_PORT
          value: {{ .Values.env.DB_PORT | quote }}
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_USER.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_USER.key }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_PASSWORD.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_PASSWORD.key }}"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.MYSQL_DATABASE.secretName }}"
              key: "{{ .Values.opSecret.MYSQL_DATABASE.key }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.JWT_SECRET.secretName }}"
              key: "{{ .Values.opSecret.JWT_SECRET.key }}"
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.opSecret.ENCRYPTION_KEY.secretName }}"
              key: "{{ .Values.opSecret.ENCRYPTION_KEY.key }}"
      ports:
        - containerPort: 3000
      readinessProbe:
        httpGet:
          path: /
          port: 3000
        initialDelaySeconds: 10
        periodSeconds: 10
    - name: frontend
      image: {{ .Values.image.frontend }}
      imagePullPolicy: Always
      env:
        - name: REACT_APP_API_BASE_URL
          value: {{ .Values.env.REACT_APP_API_BASE_URL | quote }}
        - name: REACT_APP_THEME
          value: {{ .Values.env.REACT_APP_THEME | quote }}
      ports:
        - containerPort: 80
      readinessProbe:
        httpGet:
          path: /
          port: 80
        initialDelaySeconds: 10
        periodSeconds: 10
  volumes:
    - name: db-nfs
      nfs:
        server: {{ .Values.nfs.server | quote }}
        path: {{ .Values.nfs.path | quote }}
