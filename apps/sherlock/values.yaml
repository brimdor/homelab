app-template:
  controllers:
    main:
      containers:
        main:
          image:
            repository: brimdor/bots
            tag: sherlock
            pullPolicy: Always
          env:
            TZ: "America/Chicago"
            DISCORD_TOKEN:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "discord-token"
            OPENAI_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "openai-api-key"
            AI_TYPE:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-type"
            AI_ROLE1:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-role1"
            AI_ROLE2:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-role2"
            AI_NAME:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-name"
            AI_MODEL:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-model"
            AI_SEARCH_MODEL:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-search-model"
            AI_ASSISTANT_MODEL:
              valueFrom:
                secretKeyRef:
                  name: "secrets"
                  key: "ai-assistant-model"
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
      #   backup:
      #     image:
      #       repository: alpine
      #       tag: latest
      #     env:
      #       TZ: "America/Chicago"
      #       MAX_BACKUPS: "15"
      #     name: backup
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         while true; do
      #           timestamp=$(date +%Y-%m-%d_%H-%M-%S)
      #           backup_file="/mnt/backup/backup-$timestamp.tar.gz"
      #           echo "[$(date +%Y-%m-%d_%H-%M-%S)] Starting backup to $backup_file"
      #           mkdir -p /app/config
      #           tar --exclude="lost+found" -czf $backup_file -C /app config
      #           echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backup is Complete: $backup_file"

      #           # Purge old backups if the total exceeds MAX_BACKUPS
      #           backup_count=$(ls /mnt/backup/backup-*.tar.gz 2>/dev/null | wc -l)
      #           if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
      #             echo "[$(date +%Y-%m-%d_%H-%M-%S)] Total backups ($backup_count) exceed MAX_BACKUPS ($MAX_BACKUPS). Purging oldest backups."
      #             ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
      #             echo "[$(date +%Y-%m-%d_%H-%M-%S)] Purge complete."
      #           fi

      #           sleep 600 # Wait 10 minutes
      #         done
      # initContainers:
      #   restore:
      #     image:
      #       repository: alpine
      #       tag: latest
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         timestamp=$(date +%Y-%m-%d_%H-%M-%S)
      #         echo "[$timestamp] Starting restore process"
      #         if [ ! -f /app/config/bees-knees ]; then
      #           mkdir -p /app/config
      #           latest_backup=$(ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | head -n 1)
      #           if [ -n "$latest_backup" ]; then
      #             echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring from backup: $latest_backup"
      #             tar -xzf $latest_backup -C /app
      #             touch /app/config/bees-knees
      #             echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore is Complete: bees-knees file created"
      #           else
      #             echo "[$(date +%Y-%m-%d_%H-%M-%S)] No backup found. Skipping restore."
      #           fi
      #         else
      #           echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore skipped. Bees-knees file exists."
      #         fi
  service:
    main:
      enabled: false
  # persistence:
  #   data:
  #     accessMode: ReadWriteOnce
  #     size: 15Gi
  #     advancedMounts:
  #       main:
  #         main:
  #           - path: /app/config
          # backup:
          #   - path: /app/config
          # restore:
          #   - path: /app/config
  #   nfs:
  #     type: nfs
  #     server: 10.0.50.3
  #     path: /mnt/user/sherlock-backups
  #     advancedMounts:
  #       main:
  #         backup:
  #           - path: /mnt/backup
  #         restore:
  #           - path: /mnt/backup
  
  defaultPodOptions:
    annotations:
      operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/qfzu6le7qncz5otwcnsh7wq4xi"
      operator.1password.io/item-name: "secrets"