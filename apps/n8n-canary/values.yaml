# n8n-canary umbrella values for the official 8gears n8n chart
# References:
# - https://github.com/8gears/n8n-helm-chart/tree/main/charts/n8n
# - https://artifacthub.io/packages/helm/open-8gears/n8n

n8n:
  # Ingress configuration modeled after `apps/emby/values.yaml`
  ingress:
    enabled: true
    className: nginx
    annotations:
      external-dns.alpha.kubernetes.io/target: "homelab-tunnel.eaglepass.io"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: n8n-canary.eaglepass.io
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - n8n-canary.eaglepass.io
        secretName: n8n-tls-certificate

  # Main n8n app config using Postgres inside same namespace
  main:
    config:
      n8n:
        host: n8n-canary.eaglepass.io
        port: 5678
        protocol: https
      db:
        type: postgresdb
        postgresdb:
          host: n8n-db
          port: 5432
      generic:
        timezone: America/Chicago

    # Provide sensitive values from external Secret managed by 1Password Operator
    # The operator will create a Secret named `secrets` using the annotations below
    secret: {}
    extraEnv:
      N8N_ENCRYPTION_KEY:
        valueFrom:
          secretKeyRef:
            name: secrets
            key: n8n-encryption-key
      DB_POSTGRESDB_DATABASE:
        valueFrom:
          secretKeyRef:
            name: secrets
            key: n8n-postgres-db
      DB_POSTGRESDB_USER:
        valueFrom:
          secretKeyRef:
            name: secrets
            key: n8n-postgres-user
      DB_POSTGRESDB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: secrets
            key: n8n-postgres-password

    service:
      type: ClusterIP
      # Chart defaults to mapping to container port http (5678). Expose 80 for ingress.
      port: 80

    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http

    # Remove duplicate initContainers and keep a single restore matching current app
    initContainers:
      - name: main-restore
        image: alpine:latest
        command:
          - /bin/sh
          - -c
          - |
            set -e
            ts=$(date +%Y-%m-%d_%H-%M-%S)
            echo "[$ts] Starting n8n config restore"
            if [ ! -f /home/node/.n8n/.bees-knees ]; then
              latest_backup=$(ls -t /mnt/backup/n8n/n8n-*.tar.gz 2>/dev/null | head -n 1 || true)
              if [ -n "$latest_backup" ]; then
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring n8n config from: $latest_backup"
                mkdir -p /home/node/.n8n
                tar -xzf "$latest_backup" -C /home/node/.n8n
                touch /home/node/.n8n/.bees-knees
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore complete"
              else
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] No n8n config backup found. Skipping restore."
              fi
            else
              echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore skipped. Marker exists."
            fi
        volumeMounts:
          - name: data
            mountPath: /home/node/.n8n
          - name: nfs-backups
            mountPath: /mnt/backup

    # Ensure NFS backups path uses n8n-canary_backups
    extraVolumes:
      - name: nfs-backups
        nfs:
          server: 10.0.50.3
          path: /mnt/user/n8n-canary_backups
    extraVolumeMounts:
      - name: nfs-backups
        mountPath: /mnt/backup

    podAnnotations:
      operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
      operator.1password.io/item-name: "secrets"

  worker:
    enabled: false
  webhook:
    enabled: false

  # Supplementary K8s manifests applied with the subchart
  extraManifests:
    # PVC for n8n data used by the main pod and backup CronJob
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: n8n-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
        # storageClassName: ""  # optional: set if you need a specific class

    # Postgres headless Service
    - apiVersion: v1
      kind: Service
      metadata:
        name: n8n-db
        labels:
          app: n8n-db
      spec:
        ports:
          - name: postgres
            port: 5432
            targetPort: 5432
        clusterIP: None
        selector:
          app: n8n-db

    # Postgres StatefulSet with PVC for swift local I/O and NFS for backups
    - apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: n8n-db
        labels:
          app: n8n-db
      spec:
        selector: { matchLabels: { app: n8n-db } }
        serviceName: n8n-db
        replicas: 1
        template:
          metadata:
            labels:
              app: n8n-db
            annotations:
              operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
              operator.1password.io/item-name: "secrets"
          spec:
            initContainers:
              - name: db-restore
                image: alpine:latest
                command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "[INIT] Preparing initial DB restore script..."
                    mkdir -p /work
                    latest_dump=$(ls -t /mnt/backup/db/db-*.dump 2>/dev/null | head -n 1 || true)
                    if [ -n "$latest_dump" ] && [ -s "$latest_dump" ]; then
                      echo "[INIT] Using dump: $latest_dump"
                      cp "$latest_dump" /work/db.dump
                      printf '%s\n' \
                        '#!/bin/sh' \
                        'set -e' \
                        'echo "[INITDB] Restoring database from /docker-entrypoint-initdb.d/db.dump"' \
                        'pg_restore -U "$POSTGRES_USER" -d "$POSTGRES_DB" /docker-entrypoint-initdb.d/db.dump' \
                        'echo "[INITDB] Restore complete."' \
                        > /work/10-restore.sh
                      chmod +x /work/10-restore.sh
                    else
                      echo "[INIT] No valid DB dump found. Creating no-op init script."
                      printf '%s\n' \
                        '#!/bin/sh' \
                        'echo "[INITDB] No dump present; skipping database restore."' \
                        > /work/99-noop.sh
                      chmod +x /work/99-noop.sh
                    fi
                volumeMounts:
                  - name: initdb
                    mountPath: /work
                  - name: nfs-backups
                    mountPath: /mnt/backup
            containers:
              - name: postgres
                image: postgres:16-alpine
                env:
                  - { name: TZ, value: America/Chicago }
                  - { name: PGDATA, value: /var/lib/postgresql/data }
                  - name: POSTGRES_DB
                    valueFrom: { secretKeyRef: { name: secrets, key: n8n-postgres-db } }
                  - name: POSTGRES_USER
                    valueFrom: { secretKeyRef: { name: secrets, key: n8n-postgres-user } }
                  - name: POSTGRES_PASSWORD
                    valueFrom: { secretKeyRef: { name: secrets, key: n8n-postgres-password } }
                ports:
                  - { name: postgres, containerPort: 5432 }
                volumeMounts:
                  - { name: data, mountPath: /var/lib/postgresql }
                  - { name: nfs-backups, mountPath: /mnt/backup }
                  - { name: initdb, mountPath: /docker-entrypoint-initdb.d }
            volumes:
              - name: nfs-backups
                nfs:
                  server: 10.0.50.3
                  path: /mnt/user/n8n-canary_backups
              - name: initdb
                emptyDir: {}
        volumeClaimTemplates:
          - metadata:
              name: data
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi

    # CronJob to back up n8n application data (PVC -> NFS), same command style as current app
    - apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: n8n-data-backup
      spec:
        schedule: "*/10 * * * *"
        concurrencyPolicy: Forbid
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 3
        jobTemplate:
          spec:
            template:
              metadata:
                annotations:
                  operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
                  operator.1password.io/item-name: "secrets"
              spec:
                restartPolicy: OnFailure
                containers:
                  - name: backup
                    image: alpine:latest
                    env:
                      - name: TZ
                        value: America/Chicago
                      - name: MAX_BACKUPS
                        value: "15"
                    command:
                      - /bin/sh
                      - -c
                      - |
                        set -e
                        mkdir -p /mnt/backup/n8n
                        ts=$(date +%Y-%m-%d_%H-%M-%S)
                        n8n_file="/mnt/backup/n8n/n8n-${ts}.tar.gz"
                        tmp_n8n="${n8n_file}.tmp"
                        echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backing up n8n config to $n8n_file"
                        if tar --exclude="lost+found" -czf "$tmp_n8n" -C /home/node/.n8n . \
                          && tar -tzf "$tmp_n8n" >/dev/null 2>&1; then
                          mv -f "$tmp_n8n" "$n8n_file"
                        else
                          echo "[WARN] n8n tar verification failed; skipping."
                          rm -f "$tmp_n8n"
                        fi
                        cnt=$(ls -1 /mnt/backup/n8n/n8n-*.tar.gz 2>/dev/null | wc -l)
                        if [ "$cnt" -gt "$MAX_BACKUPS" ]; then
                          ls -t /mnt/backup/n8n/n8n-*.tar.gz | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                        fi
                    volumeMounts:
                      - name: n8n-data
                        mountPath: /home/node/.n8n
                      - name: nfs-backups
                        mountPath: /mnt/backup
                volumes:
                  - name: n8n-data
                    persistentVolumeClaim:
                      claimName: n8n-data
                  - name: nfs-backups
                    nfs:
                      server: 10.0.50.3
                      path: /mnt/user/n8n-canary_backups

    # CronJob to back up Postgres database (pg_dump -> NFS), same command style as current app (single-run)
    - apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: n8n-db-backup
      spec:
        schedule: "*/10 * * * *"
        concurrencyPolicy: Forbid
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 3
        jobTemplate:
          spec:
            template:
              metadata:
                annotations:
                  operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
                  operator.1password.io/item-name: "secrets"
              spec:
                restartPolicy: OnFailure
                containers:
                  - name: backup
                    image: postgres:16-alpine
                    env:
                      - name: TZ
                        value: America/Chicago
                      - name: MAX_BACKUPS
                        value: "15"
                      - name: PGHOST
                        value: n8n-db
                      - name: PGPORT
                        value: "5432"
                      - name: PGDATABASE
                        valueFrom:
                          secretKeyRef:
                            name: secrets
                            key: n8n-postgres-db
                      - name: PGUSER
                        valueFrom:
                          secretKeyRef:
                            name: secrets
                            key: n8n-postgres-user
                      - name: PGPASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: secrets
                            key: n8n-postgres-password
                    command:
                      - /bin/sh
                      - -c
                      - |
                        set -e
                        mkdir -p /mnt/backup/db
                        ts=$(date +%Y-%m-%d_%H-%M-%S)
                        db_file="/mnt/backup/db/db-${ts}.dump"
                        tmp_db="${db_file}.tmp"
                        echo "[$(date +%Y-%m-%d_%H-%M-%S)] Waiting for postgres to be ready..."
                        until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" >/dev/null 2>&1; do
                          sleep 2
                        done
                        echo "[$(date +%Y-%m-%d_%H-%M-%S)] Running pg_dump to $db_file"
                        if pg_dump -Fc -f "$tmp_db"; then
                          if [ -s "$tmp_db" ]; then
                            mv -f "$tmp_db" "$db_file"
                          else
                            echo "[WARN] pg_dump created empty file; skipping."
                            rm -f "$tmp_db"
                          fi
                        else
                          echo "[WARN] pg_dump failed (db may not be ready)."
                          rm -f "$tmp_db"
                        fi
                        cnt=$(ls -1 /mnt/backup/db/db-*.dump 2>/dev/null | wc -l)
                        if [ "$cnt" -gt "$MAX_BACKUPS" ]; then
                          ls -t /mnt/backup/db/db-*.dump | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                        fi
                    volumeMounts:
                      - name: nfs-backups
                        mountPath: /mnt/backup
                volumes:
                  - name: nfs-backups
                    nfs:
                      server: 10.0.50.3
                      path: /mnt/user/n8n-canary_backups