# values.yaml for bolt-diy Helm chart using bjw-s common chart
# See https://github.com/bjw-s-labs/helm-charts/blob/main/charts/library/common/values.yaml for all options
app-template:
  controllers:
    main:
      containers:
        main:
          image:
            repository: lscr.io/linuxserver/code-server
            tag: latest
            pullPolicy: Always
          env:
            PUID: "99"
            PGID: "100"
            PASSWORD:
              valueFrom:
                  secretKeyRef:
                    name: "code-password"
                    key: "code-password"
            SUDO_PASSWORD:
              valueFrom:
                  secretKeyRef:
                    name: "code-sudo-password"
                    key: "code-sudo-password"
            TZ: "America/Chicago"
        backup:
          image:
            repository: alpine
            tag: latest
          name: backup
          command:
            - /bin/sh
            - -c
            - |
              MAX_BACKUPS=15 # Set the maximum number of backups to keep
              while true; do
                timestamp=$(date +%Y-%m-%d_%H-%M-%S)
                backup_file="/tmp/backup/backup-$timestamp.tar.gz"
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Starting backup to $backup_file"
                tar --exclude="lost+found" -czf $backup_file -C /config .
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backup is Complete: $backup_file"

                # Purge old backups if the total exceeds MAX_BACKUPS
                backup_count=$(ls /tmp/backup/backup-*.tar.gz 2>/dev/null | wc -l)
                if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Total backups ($backup_count) exceed MAX_BACKUPS ($MAX_BACKUPS). Purging oldest backups."
                  ls -t /tmp/backup/backup-*.tar.gz 2>/dev/null | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Purge complete."
                fi

                sleep 600 # Wait 10 minutes
              done
      initContainers:
        restore:
          image:
            repository: alpine
            tag: latest
          command:
            - /bin/sh
            - -c
            - |
              timestamp=$(date +%Y-%m-%d_%H-%M-%S)
              echo "[$timestamp] Starting restore process"
              if [ ! -f /config/bees-knees ]; then
                latest_backup=$(ls -t /tmp/backup/backup-*.tar.gz 2>/dev/null | head -n 1)
                if [ -n "$latest_backup" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring from backup: $latest_backup"
                  tar -xzf $latest_backup -C /config
                  touch /config/bees-knees
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore is Complete: bees-knees file created"
                else
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] No backup found. Skipping restore."
                fi
              else
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore skipped. Bees-knees file exists."
              fi
  service:
    main:
      ports:
        http:
          port: 8443
          protocol: HTTP
  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: code.eaglepass.io
          paths:
            - path: /
              pathType: Prefix
              service:
                name: main
                port: http
      tls:
        - hosts:
            - code.eaglepass.io
          secretName: code-tls-certificate
  persistence:
    data:
      accessMode: ReadWriteOnce
      size: 15Gi
      advancedMounts:
        main:
          main:
            - path: /config
          backup:
            - path: /config
          restore:
            - path: /config
    nfs:
      type: nfs
      server: 10.0.50.3
      path: /mnt/user/code
      advancedMounts:
        main:
          backup:
            - path: /tmp/backup
          restore:
            - path: /tmp/backup
secrets:
  PASSWORD:
    vault: "4uaua4a45yuhnwhehp5bwylmti"
    item: "fozp4ws74orp6i6x7u4wudk23y"
    secretName: "code-password"

  SUDO_PASSWORD:
    vault: "4uaua4a45yuhnwhehp5bwylmti"
    item: "fozp4ws74orp6i6x7u4wudk23y"
    secretName: "code-sudo-password"

