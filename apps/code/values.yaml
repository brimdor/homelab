app-template:
  controllers:
    main:
      containers:
        main:
          image:
            repository: brimdor/vscode-tunnel
            tag: latest
            pullPolicy: Always
          env:
            TZ: "America/Chicago"
            TUNNEL_NAME: &host "SecretTunnel"
            PROVIDER: "microsoft"
            GIT_USER_NAME: "brimdor"
            GIT_USER_EMAIL: "chrisnelsonx@gmail.com"
            DOCKER_HOST: ssh://root@10.0.50.3
            PRIVATE_KEY:
              valueFrom:
                secretKeyRef:
                  name: "ssh-keys"
                  key: "private-key"
            PUBLIC_KEY:
              valueFrom:
                secretKeyRef:
                  name: "ssh-keys"
                  key: "public-key"
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
        backup:
          image:
            repository: alpine
            tag: latest
          env:
            TZ: "America/Chicago"
            MAX_BACKUPS: "15"
          name: backup
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                timestamp=$(date +%Y-%m-%d_%H-%M-%S)
                backup_file="/mnt/backup/backup-$timestamp.tar.gz"
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Starting backup to $backup_file"
                tar --exclude="lost+found" -czf $backup_file -C /home/coder .
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backup is Complete: $backup_file"

                # Purge old backups if the total exceeds MAX_BACKUPS
                backup_count=$(ls /mnt/backup/backup-*.tar.gz 2>/dev/null | wc -l)
                if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Total backups ($backup_count) exceed MAX_BACKUPS ($MAX_BACKUPS). Purging oldest backups."
                  ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Purge complete."
                fi

                sleep 600 # Wait 10 minutes
              done
      initContainers:
        restore:
          image:
            repository: alpine
            tag: latest
          command:
            - /bin/sh
            - -c
            - |
              timestamp=$(date +%Y-%m-%d_%H-%M-%S)
              echo "[$timestamp] Starting restore process"
              if [ ! -f /home/coder/bees-knees ]; then
                latest_backup=$(ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | head -n 1)
                if [ -n "$latest_backup" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring from backup: $latest_backup"
                  tar -xzf $latest_backup -C /home/coder
                  touch /home/coder/bees-knees
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore is Complete: bees-knees file created"
                else
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] No backup found. Skipping restore."
                fi
              else
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore skipped. Bees-knees file exists."
              fi
  service:
    main:
      enabled: false
  persistence:
    data:
      accessMode: ReadWriteOnce
      size: 15Gi
      advancedMounts:
        main:
          main:
            - path: /home/coder
          backup:
            - path: /home/coder
          restore:
            - path: /home/coder
    nfs:
      type: nfs
      server: 10.0.50.3
      path: /mnt/user/code-backups
      advancedMounts:
        main:
          backup:
            - path: /mnt/backup
          restore:
            - path: /mnt/backup
  
  defaultPodOptions:
    hostname: *host
    securityContext:
      fsGroup: 1000
    annotations:
      operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/72o4yiye3zrgz3tiucrdgjgpqq"
      operator.1password.io/item-name: "ssh-keys"