# https://github.com/open-webui/helm-charts/blob/main/charts/open-webui/values.yaml
open-webui:
  ollama:
    enabled: false
  pipelines:
    enabled: false
  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 1500m
      memory: 2Gi
  ingress:
    enabled: true
    class: nginx
    annotations:
      external-dns.alpha.kubernetes.io/target: "homelab-tunnel.eaglepass.io"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
    host: &openwebuihost ai.eaglepass.io
    tls: true
  extraEnvVars:
    - name: ENABLE_LOGIN_FORM
      value: "true"
    - name: WEBUI_URL
      value: *openwebuihost
    - name: BYPASS_MODEL_ACCESS_CONTROL
      value: "true"
    - name: OLLAMA_BASE_URL
      value: "http://ollama.ollama.svc.cluster.local:11434"
    - name: WEBUI_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: secrets
          key: webui-secret-key
    - name: OPENAI_API_KEY
      valueFrom:
        secretKeyRef:
          name: secrets
          key: openai-api-key
    # New environment variables for RAG and Audio STT engines
    - name: RAG_EMBEDDING_ENGINE
      value: "ollama"
    - name: AUDIO_STT_ENGINE
      value: "openai"
  podAnnotations:
    operator.1password.io/auto-restart: "true"
  extraResources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: secrets
        annotations:
          operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/gsdumrejgu5tvtft4rutwtbdgy"
          operator.1password.io/item-name: "secrets"
      type: Opaque
      stringData:
        webui-secret-key: "placeholder"
        openai-api-key: "placeholder"
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: mcpo-sync-scripts
      data:
        gen-config.py: |
          import json
          import os
          import time
          from pathlib import Path

          REPO_LINK = os.getenv("REPO_LINK", "/git/repo")
          SERVERS_DIR = os.getenv("SERVERS_DIR", "servers")
          OUT = os.getenv("OUT", "/config/config.json")
          WATCH = os.getenv("WATCH", "false").lower() == "true"

          def build_config():
            base = Path(REPO_LINK) / SERVERS_DIR
            servers = []
            if base.exists():
              for d in sorted(base.iterdir()):
                if d.is_dir():
                  # crude detection: expect a server.json per subdir
                  server_json = d / "server.json"
                  if server_json.exists():
                    try:
                      with server_json.open() as f:
                        servers.append(json.load(f))
                    except Exception as e:
                      print(f"Failed to parse {server_json}: {e}")
            cfg = {"servers": servers}
            Path(OUT).parent.mkdir(parents=True, exist_ok=True)
            with open(OUT, "w") as f:
              json.dump(cfg, f, indent=2)
            print(f"Wrote config with {len(servers)} servers to {OUT}")

          if __name__ == "__main__":
            if WATCH:
              last = None
              while True:
                try:
                  snap = None
                  base = Path(REPO_LINK) / SERVERS_DIR
                  if base.exists():
                    snap = tuple(sorted(p.stat().st_mtime for p in base.rglob("*")))
                  if snap != last:
                    build_config()
                    last = snap
                except Exception as e:
                  print(f"Error while generating config: {e}")
                time.sleep(5)
            else:
              build_config()
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mcpo
        labels:
          app.kubernetes.io/name: mcpo
      spec:
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/name: mcpo
        template:
          metadata:
            labels:
              app.kubernetes.io/name: mcpo
          spec:
            volumes:
              - name: git-data
                emptyDir: {}
              - name: mcpo-config
                emptyDir: {}
              - name: mcpo-scripts
                configMap:
                  name: mcpo-sync-scripts
                  defaultMode: 0755
              - name: git-sync-ssh
                secret:
                  secretName: secrets
                  optional: true
                  items:
                    - key: ssh_private_key
                      path: ssh_private_key
                    - key: ssh_known_hosts
                      path: known_hosts
            containers:
              - name: git-sync
                image: registry.k8s.io/git-sync/git-sync:v4.5.0
                volumeMounts:
                  - name: git-data
                    mountPath: /git
                  - name: git-sync-ssh
                    mountPath: /etc/git-secret
                    readOnly: true
                env:
                  # Core git-sync env (replaces args)
                  - name: GITSYNC_REPO
                    value: "https://github.com/brimdor/mcp-servers.git"
                  - name: GITSYNC_REF
                    value: "main"
                  - name: GITSYNC_ROOT
                    value: "/git"
                  - name: GITSYNC_LINK
                    value: "repo"
                  - name: GITSYNC_PERIOD
                    value: "30s"
                  - name: GITSYNC_HTTP_BIND
                    value: ":9090"
                  # Optional auth for private repos
                  # Use bearer token sourced from 1Password (Secret/secrets key mcpo-git-sync-auth)
                  - name: GITSYNC_BEARER_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: secrets
                        key: mcpo-git-sync-auth
                        optional: true
                  # SSH mode (set ssh_enable to "true" in the secret and use an SSH repo URL)
                  - name: GITSYNC_SSH
                    valueFrom:
                      secretKeyRef:
                        name: secrets
                        key: mcpo-git-sync-ssh-enable
                        optional: true
                  - name: GITSYNC_SSH_KEY_FILE
                    value: "/etc/git-secret/ssh_private_key"
                  - name: GITSYNC_SSH_KNOWN_HOSTS
                    value: "true"
                  - name: GITSYNC_SSH_KNOWN_HOSTS_FILE
                    value: "/etc/git-secret/known_hosts"
              - name: mcpo-config-watcher
                image: python:3.12-alpine
                command: ["sh","-lc"]
                args:
                  - >
                    python /opt/mcpo/gen-config.py
                    || true;
                    python /opt/mcpo/gen-config.py
                env:
                  - name: REPO_LINK
                    value: /git/repo
                  - name: SERVERS_DIR
                    value: servers
                  - name: OUT
                    value: /config/config.json
                  - name: GITHUB_OWNER
                    value: ACME
                  - name: GITHUB_REPO
                    value: my-mcp-servers
                  - name: GITHUB_REF
                    value: main
                  - name: WATCH
                    value: "true"
                volumeMounts:
                  - name: git-data
                    mountPath: /git
                  - name: mcpo-config
                    mountPath: /config
                  - name: mcpo-scripts
                    mountPath: /opt/mcpo
              - name: mcpo
                image: ghcr.io/open-webui/mcpo:latest
                args:
                  - "--host=0.0.0.0"
                  - "--port=8081"
                  - "--config=/config/config.json"
                  - "--hot-reload"
                ports:
                  - name: http
                    containerPort: 8081
                env:
                  - name: LOG_LEVEL
                    value: info
                volumeMounts:
                  - name: mcpo-config
                    mountPath: /config
    - apiVersion: v1
      kind: Service
      metadata:
        name: mcpo
        labels:
          app.kubernetes.io/name: mcpo
      spec:
        type: ClusterIP
        selector:
          app.kubernetes.io/name: mcpo
        ports:
          - name: http
            port: 8081
            targetPort: 8081
  image:
    repository: ghcr.io/open-webui/open-webui
    tag: "latest"
    pullPolicy: "Always"
  persistence:
    enabled: true
    existingClaim: openwebui-nfs-pvc
    additionalVolumes:
      - name: embedded-models
        persistentVolumeClaim:
          claimName: openwebui-embedded-models-pvc
      - name: openwebui-data
        persistentVolumeClaim:
          claimName: openwebui-data-pvc
    additionalVolumeMounts:
      - name: embedded-models
        mountPath: /app/embedded-models
      - name: openwebui-data
        mountPath: /app/backend/data