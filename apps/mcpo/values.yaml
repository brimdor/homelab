app-template:
  controllers:
    main:
      pod:
        annotations:
          operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/gsdumrejgu5tvtft4rutwtbdgy"
          operator.1password.io/item-name: "secrets"
      containers:
        main:
          image:
            repository: node
            tag: "20-alpine"
            pullPolicy: Always
          env:
            TZ: "America/Chicago"
            NODE_ENV: "production"

            # Streamable HTTP transport config
            MCP_TRANSPORT_TYPE: "http"
            MCP_HTTP_HOST: "0.0.0.0"
            MCP_HTTP_PORT: "8000"

            # CORS / Origin hardening: set to your Open WebUI URL(s)
            # Comma-separate if you have more than one UI allowed.
            MCP_ALLOWED_ORIGINS: "https://open.eaglepass.io"

            # JWT auth for the MCP server (fetched from 1Password)
            MCP_AUTH_SECRET_KEY:
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mcp-auth-secret-key
                  
            # Optional logging
            MCP_LOG_LEVEL: "info"

          command:
            - /bin/sh
            - -lc
          args:
            - |
              # ensure workspace exists and is writable
              mkdir -p /data
              # install the filesystem MCP server at runtime
              npm i -g @cyanheads/filesystem-mcp-server
              # run over Streamable HTTP; allow operating within /data only
              # Server reads transport/host/port/origins/auth from env above.
              filesystem-mcp-server --root /data

          ports:
            - name: http
              containerPort: 8000

          probes:
            # Streamable HTTP servers usually have no GET /health route.
            # Use TCP probes for liveness/readiness.
            liveness:
              enabled: false
              custom: true
              spec:
                tcpSocket: { port: http }
                initialDelaySeconds: 15
                periodSeconds: 15
            readiness:
              enabled: false
              custom: true
              spec:
                tcpSocket: { port: http }
                initialDelaySeconds: 5
                periodSeconds: 10
            startup:
              enabled: false
              custom: true
              spec:
                tcpSocket: { port: http }
                failureThreshold: 60
                periodSeconds: 2

          resources:
            requests: { cpu: 100m, memory: 256Mi }
            limits:   { cpu: 500m, memory: 512Mi }

  service:
    main:
      controller: main
      ports:
        http:
          port: 8000
          targetPort: http

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host mcpo.eaglepass.io
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
                port: http
      tls:
        - hosts: [ *host ]
          secretName: mcpo-tls-certificate

  persistence:
    data:
      enabled: true
      type: nfs
      server: 10.0.50.3
      path: /mnt/user/mcpo   # reuse your NFS share for workspace
      advancedMounts:
        main:
          main:
            - path: /data

  defaultPodOptions:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
