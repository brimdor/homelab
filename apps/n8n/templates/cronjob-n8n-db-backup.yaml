apiVersion: batch/v1
kind: CronJob
metadata:
  name: n8n-db-backup
spec:
  schedule: "*/10 * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
            operator.1password.io/item-name: "secrets"
        spec:
          restartPolicy: OnFailure
          containers:
            - name: backup
              image: postgres:16-alpine
              imagePullPolicy: Always
              env:
                - name: TZ
                  value: America/Chicago
                - name: MAX_BACKUPS
                  value: "15"
                - name: PGHOST
                  value: n8n-db
                - name: PGPORT
                  value: "5432"
                - name: PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      name: secrets
                      key: n8n-postgres-db
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: secrets
                      key: n8n-postgres-user
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: secrets
                      key: n8n-postgres-password
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  mkdir -p /mnt/backup/db
                  ts=$(date +%Y-%m-%d_%H-%M-%S)
                  db_file="/mnt/backup/db/db-${ts}.dump"
                  tmp_db="${db_file}.tmp"
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Waiting for postgres to be ready..."
                  until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" >/dev/null 2>&1; do
                    sleep 2
                  done
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Running pg_dump to $db_file"
                  if pg_dump -Fc -f "$tmp_db"; then
                    if [ -s "$tmp_db" ]; then
                      mv -f "$tmp_db" "$db_file"
                    else
                      echo "[WARN] pg_dump created empty file; skipping."
                      rm -f "$tmp_db"
                    fi
                  else
                    echo "[WARN] pg_dump failed (db may not be ready)."
                    rm -f "$tmp_db"
                  fi
                  cnt=$(ls -1 /mnt/backup/db/db-*.dump 2>/dev/null | wc -l)
                  if [ "$cnt" -gt "$MAX_BACKUPS" ]; then
                    ls -t /mnt/backup/db/db-*.dump | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                  fi
              volumeMounts:
                - name: nfs-backups
                  mountPath: /mnt/backup
          volumes:
            - name: nfs-backups
              nfs:
                server: 10.0.50.3
                path: /mnt/user/n8n_backups
