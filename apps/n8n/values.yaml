# n8n on official community n8n Helm chart
# Reference chart: https://artifacthub.io/packages/helm/community-charts/n8n/1.14.1
# This values.yaml configures:
# - Ingress (nginx) with your DNS/Cert-Manager annotations
# - n8n persistent data on a PVC (RWO)
# - NFS mount for backups + initContainer restore
# - PostgreSQL (StatefulSet) in the same namespace with its own PVC
# - CronJobs to back up n8n config (tar) and the PostgreSQL database (pg_dump) to NFS
# - 1Password Operator annotations (placeholders) on pods to source Secret "secrets"

image:
  repository: n8nio/n8n
  tag: ""
  pullPolicy: IfNotPresent

env:
  TZ: "America/Chicago" # Set timezone for n8n and cron jobs
  DB_POSTGRESDB_HOST: "n8n-db.n8n.svc.cluster.local"
  DB_POSTGRESDB_PORT: "5432"
  DB_POSTGRESDB_DATABASE:
    valueFrom:
      secretKeyRef:
        name: "secrets"
        key: "n8n-postgres-db"
  DB_POSTGRESDB_USER:
    valueFrom:
      secretKeyRef:
        name: "secrets"
        key: "n8n-postgres-user"
  DB_POSTGRESDB_PASSWORD:
    valueFrom:
      secretKeyRef:
        name: "secrets"
        key: "n8n-postgres-password"
  N8N_ENCRYPTION_KEY:
    valueFrom:
      secretKeyRef:
        name: "secrets"
        key: "n8n-encryption-key"

# Global pod annotations (1Password operator)
podAnnotations:
  operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
  operator.1password.io/item-name: "secrets"

service:
  enabled: true
  type: ClusterIP
  port: 5678
  name: http

ingress:
  enabled: true
  className: nginx
  annotations:
    external-dns.alpha.kubernetes.io/target: "homelab-tunnel.eaglepass.io"
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: n8n.eaglepass.io
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - n8n.eaglepass.io
      secretName: n8n-tls-certificate

# ClusterIP service for n8n
# service:
#   enabled: true
#   type: ClusterIP
#   port: 5678
#   name: http

# Database configuration (use built-in Bitnami PostgreSQL subchart)
db:
  type: postgresdb

postgresql:
  enabled: true
  auth:
    username: "n8n"
    password: "change-me"
    database: "n8n"
  primary:
    persistence:
      enabled: true
      existingClaim: n8n-db-data
    # Mount NFS backups into Postgres pod for initdb restore
    extraVolumes:
      - name: nfs-backups
        nfs:
          server: 10.0.50.3
          path: /mnt/user/n8n_backups
    extraVolumeMounts:
      - name: nfs-backups
        mountPath: /mnt/backup
    # Run a restore script on first DB initialization (if a dump exists on NFS)
    initdb:
      scripts:
        10-restore.sh: |
          #!/bin/sh
          set -e
          echo "[INITDB] Checking for latest dump in /mnt/backup/db"
          latest_dump=$(ls -t /mnt/backup/db/db-*.dump 2>/dev/null | head -n 1 || true)
          if [ -n "$latest_dump" ] && [ -s "$latest_dump" ]; then
            echo "[INITDB] Restoring from $latest_dump"
            pg_restore -U "$POSTGRES_USER" -d "$POSTGRES_DB" "$latest_dump"
            echo "[INITDB] Restore complete"
          else
            echo "[INITDB] No dump found; skipping restore"
          fi

# Main n8n application
main:
  # Remove DB env overrides; chart wires from db/postgresql values
  extraEnvVars: {}

  # Probes (use defaults if omitted)
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
  readinessProbe:
    httpGet:
      path: /healthz/readiness
      port: http

  # Persistent storage for n8n working dir
  persistence:
    enabled: true
    existingClaim: n8n-data
    mountPath: /home/node/.n8n
    accessMode: ReadWriteOnce

  # Mount NFS backups into n8n pod
  volumeMounts:
    - name: nfs-backups
      mountPath: /mnt/backup

  # Restore from latest backup on pod cold start (before main container starts)
  initContainers:
    - name: n8n-restore
      image: alpine:3.20
      securityContext:
        runAsUser: 0
      command:
        - /bin/sh
        - -c
        - |
          set -e
          ts=$(date +%Y-%m-%d_%H-%M-%S)
          echo "[$ts] Starting n8n config restore"
          if [ ! -f /home/node/.n8n/.bees-knees ]; then
            latest_backup=$(ls -t /mnt/backup/n8n/n8n-*.tar.gz 2>/dev/null | head -n 1 || true)
            if [ -n "$latest_backup" ]; then
              echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring n8n config from: $latest_backup"
              mkdir -p /home/node/.n8n
              tar -xzf "$latest_backup" -C /home/node/.n8n
              touch /home/node/.n8n/.bees-knees
              echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore complete"
            else
              echo "[$(date +%Y-%m-%d_%H-%M-%S)] No n8n config backup found. Skipping restore."
            fi
          else
            echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore skipped. Marker exists."
          fi
      volumeMounts:
        - name: nfs-backups
          mountPath: /mnt/backup
        - name: node-modules
          mountPath: /home/node/.n8n

  # Backup sidecars (cron-like loops)
  extraContainers:
    - name: n8n-config-backup
      image: alpine:3.20
      env:
        - name: TZ
          value: "America/Chicago"
        - name: MAX_BACKUPS
          value: "15"
      command:
        - /bin/sh
        - -c
        - |
          set -e
          mkdir -p /mnt/backup/n8n
          while true; do
            ts=$(date +%Y-%m-%d_%H-%M-%S)
            n8n_file="/mnt/backup/n8n/n8n-${ts}.tar.gz"
            tmp_n8n="${n8n_file}.tmp"
            echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backing up n8n config to $n8n_file"
            if tar --exclude="lost+found" -czf "$tmp_n8n" -C /data . \
              && tar -tzf "$tmp_n8n" >/dev/null 2>&1; then
              mv -f "$tmp_n8n" "$n8n_file"
            else
              echo "[WARN] n8n tar verification failed; skipping."
              rm -f "$tmp_n8n"
            fi
            cnt=$(ls -1 /mnt/backup/n8n/n8n-*.tar.gz 2>/dev/null | wc -l)
            if [ "$cnt" -gt "$MAX_BACKUPS" ]; then
              ls -t /mnt/backup/n8n/n8n-*.tar.gz | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
            fi
            sleep 600
          done
      volumeMounts:
        - name: nfs-backups
          mountPath: /mnt/backup
        - name: node-modules
          mountPath: /data
    - name: n8n-db-backup
      image: postgres:16-alpine
      env:
        - name: TZ
          value: "America/Chicago"
        - name: MAX_BACKUPS
          value: "15"
        - name: PGHOST
          value: "n8n-postgresql"
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          value: "n8n"
        - name: PGUSER
          value: "n8n"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: "n8n-postgresql"
              key: "password"
              optional: true
      command:
        - /bin/sh
        - -c
        - |
          set -e
          mkdir -p /mnt/backup/db
          while true; do
            echo "[$(date +%Y-%m-%d_%H-%M-%S)] Waiting for postgres to be ready..."
            until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" >/dev/null 2>&1; do
              sleep 2
            done
            ts=$(date +%Y-%m-%d_%H-%M-%S)
            db_file="/mnt/backup/db/db-${ts}.dump"
            tmp_db="${db_file}.tmp"
            echo "[$(date +%Y-%m-%d_%H-%M-%S)] Running pg_dump to $db_file"
            if pg_dump -Fc -f "$tmp_db"; then
              if [ -s "$tmp_db" ]; then
                mv -f "$tmp_db" "$db_file"
              else
                echo "[WARN] pg_dump created empty file; skipping."
                rm -f "$tmp_db"
              fi
            else
              echo "[WARN] pg_dump failed."
              rm -f "$tmp_db"
            fi
            cnt=$(ls -1 /mnt/backup/db/db-*.dump 2>/dev/null | wc -l)
            if [ "$cnt" -gt "$MAX_BACKUPS" ]; then
              ls -t /mnt/backup/db/db-*.dump | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
            fi
            sleep 600
          done
      volumeMounts:
        - name: nfs-backups
          mountPath: /mnt/backup

# Extra volumes available to the pod (for NFS backups)
volumes:
  - name: nfs-backups
    nfs:
      server: 10.0.50.3
      path: /mnt/user/n8n_backups