# n8n umbrella values for the community-charts n8n chart (v1.14.1)
# References:
# - https://artifacthub.io/packages/helm/community-charts/n8n/1.14.1
# - apps/examples for official example values

n8n:
  # Image settings
  image:
    repository: n8nio/n8n
    pullPolicy: Always
    tag: "latest"  # use chart appVersion (1.106.3)

  # Apply pod annotations (moved from main.podAnnotations)
  podAnnotations:
    operator.1password.io/item-path: "vaults/4uaua4a45yuhnwhehp5bwylmti/items/zvwkudjkklr6j3ezq5kpi4tzki"
    operator.1password.io/item-name: "secrets"

  # Optional: init container image policy for nodes external packages
  nodes:
    initContainer:
      image:
        pullPolicy: Always

  # Service exposed to Ingress
  service:
    enabled: true
    type: ClusterIP
    port: 5678
    name: http

  # Ingress configuration (community chart schema)
  ingress:
    enabled: true
    className: nginx
    annotations:
      external-dns.alpha.kubernetes.io/target: "homelab-tunnel.eaglepass.io"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: n8n.eaglepass.io
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: n8n-tls-certificate
        hosts:
          - n8n.eaglepass.io

  # Database selection (use built-in Bitnami PostgreSQL subchart)
  db:
    type: postgresdb

  # Enable Bitnami PostgreSQL dependency managed by the chart
  postgresql:
    enabled: true
    image:
      pullPolicy: Always
    architecture: standalone
    primary:
      persistence:
        enabled: true
        mountPath: /bitnami/postgresql
        accessMode: ReadWriteOnce
        size: 10Gi
      extraVolumes:
        - name: nfs-backups
          nfs:
            server: 10.0.50.3
            path: /mnt/user/n8n_backups
        - name: initdb
          emptyDir: {}
      extraVolumeMounts:
        - name: nfs-backups
          mountPath: /mnt/backup
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
    initContainers:
      - name: db-restore
        image: alpine:latest
        imagePullPolicy: Always
        command:
          - /bin/sh
          - -c
          - |
            set -e
            echo "[INIT] Preparing initial DB restore script..."
            mkdir -p /work
            latest_dump=$(ls -t /mnt/backup/db/db-*.dump 2>/dev/null | head -n 1 || true)
            if [ -n "$latest_dump" ] && [ -s "$latest_dump" ]; then
              echo "[INIT] Using dump: $latest_dump"
              cp "$latest_dump" /work/db.dump
              printf '%s\n' \
                '#!/bin/sh' \
                'set -e' \
                'echo "[INITDB] Restoring database from /docker-entrypoint-initdb.d/db.dump"' \
                'pg_restore -U "$POSTGRES_USER" -d "$POSTGRES_DB" /docker-entrypoint-initdb.d/db.dump' \
                'echo "[INITDB] Restore complete."' \
                > /work/10-restore.sh
              chmod +x /work/10-restore.sh
            else
              echo "[INIT] No valid DB dump found. Creating no-op init script."
              printf '%s\n' \
                '#!/bin/sh' \
                'echo "[INITDB] No dump present; skipping database restore."' \
                > /work/99-noop.sh
              chmod +x /work/99-noop.sh
        volumeMounts:
          - name: initdb
            mountPath: /work
          - name: nfs-backups
            mountPath: /mnt/backup

  # Main pod settings
  main:
    # Probes
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz/readiness
        port: http

    # Use chart-managed persistence for app data
    persistence:
      enabled: true
      mountPath: /home/node/.n8n
      accessMode: ReadWriteOnce
      size: 10Gi
    volumes:
      - name: nfs-backups
        nfs:
          server: 10.0.50.3
          path: /mnt/user/n8n_backups
    volumeMounts:
      - name: nfs-backups
        mountPath: /mnt/backup
    initContainers:
      - name: main-restore
        image: alpine:latest
        imagePullPolicy: Always
        command:
          - /bin/sh
          - -c
          - |
            set -e
            ts=$(date +%Y-%m-%d_%H-%M-%S)
            echo "[$ts] Starting n8n config restore"
            if [ ! -f /home/node/.n8n/.bees-knees ]; then
              latest_backup=$(ls -t /mnt/backup/n8n/n8n-*.tar.gz 2>/dev/null | head -n 1 || true)
              if [ -n "$latest_backup" ]; then
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring n8n config from: $latest_backup"
                mkdir -p /home/node/.n8n
                tar -xzf "$latest_backup" -C /home/node/.n8n
                touch /home/node/.n8n/.bees-knees
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore complete"
              else
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] No n8n config backup found. Skipping restore."
              fi
            else
              echo "[$(date +%Y-%m-%d_%H-%M-%S)] n8n config restore skipped. Marker exists."
            fi
        volumeMounts:
          - name: n8n-data
            mountPath: /home/node/.n8n
          - name: nfs-backups
            mountPath: /mnt/backup

    # Import all keys from this secret into env (expects N8N_ENCRYPTION_KEY in the secret)
    extraSecretNamesForEnvFrom:
      - secrets

    # Environment variables
    extraEnvVars:
      TZ: America/Chicago
      N8N_HOST: n8n.eaglepass.io
      N8N_PROTOCOL: https
      N8N_ENCRYPTION_KEY: ""