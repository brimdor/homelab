app-template:
  controllers:
    main:
      containers:
        main:
          image:
            repository: docker.io/brimdor/browser-use
            tag: latest
          env:
            GID: "99"
            UID: "100"
            CHROME_PERSISTENT_SESSION: "true"
            OPENAI_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: api-token
                  key: password
        backup:
          image:
            repository: alpine
            tag: latest
          name: backup
          command:
            - /bin/sh
            - -c
            - |
              MAX_BACKUPS=15 # Set the maximum number of backups to keep
              while true; do
                timestamp=$(date +%Y-%m-%d_%H-%M-%S)
                backup_file="/mnt/backup/backup-$timestamp.tar.gz"
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Starting backup to $backup_file"
                tar --exclude="lost+found" -czf $backup_file -C /app .
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Backup is Complete: $backup_file"

                # Purge old backups if the total exceeds MAX_BACKUPS
                backup_count=$(ls /mnt/backup/backup-*.tar.gz 2>/dev/null | wc -l)
                if [ "$backup_count" -gt "$MAX_BACKUPS" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Total backups ($backup_count) exceed MAX_BACKUPS ($MAX_BACKUPS). Purging oldest backups."
                  ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | tail -n +$((MAX_BACKUPS + 1)) | xargs -r rm -v
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Purge complete."
                fi

                sleep 1200 # Wait 20 minutes
              done
      initContainers:
        restore:
          image:
            repository: alpine
            tag: latest
          command:
            - /bin/sh
            - -c
            - |
              timestamp=$(date +%Y-%m-%d_%H-%M-%S)
              echo "[$timestamp] Starting restore process"
              if [ ! -f /app/bees-knees ]; then
                latest_backup=$(ls -t /mnt/backup/backup-*.tar.gz 2>/dev/null | head -n 1)
                if [ -n "$latest_backup" ]; then
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restoring from backup: $latest_backup"
                  tar -xzf $latest_backup -C /app
                  touch /app/bees-knees
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore is Complete: bees-knees file created"
                else
                  echo "[$(date +%Y-%m-%d_%H-%M-%S)] No backup found. Skipping restore."
                fi
              else
                echo "[$(date +%Y-%m-%d_%H-%M-%S)] Restore skipped. Bees-knees file exists."
              fi
  service:
    main:
      ports:
        http:
          port: 7788
          protocol: HTTP
  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &ollamaHost bu.eaglepass.io
          paths:
            - path: /
              pathType: Prefix
              service:
                name: main
                port: http
      tls:
        - hosts:
            - *ollamaHost
          secretName: bu-tls-certificate
  persistence:
    data:
      accessMode: ReadWriteOnce
      size: 50Gi
      advancedMounts:
        main:
          main:
            - path: /app
          backup:
            - path: /app
          restore:
            - path: /app
    nfs:
      type: nfs
      server: 10.0.50.3
      path: /mnt/user/browser-use
      advancedMounts:
        main:
          backup:
            - path: /mnt/backup
          restore:
            - path: /mnt/backup

opSecret:
  OPENAI_API_KEY:
    vault: "4uaua4a45yuhnwhehp5bwylmti"
    item: "xlqo7wxjjeveea5eq6whcyltmm"
    secretName: "api-token"
    key: "password"