{{- if .Values.backups.enabled }}
{{- $apptemplate := index .Values "app-template" }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "elysia.fullname" . }}-backup
  labels:
    app.kubernetes.io/name: {{ include "elysia.name" . }}
    app.kubernetes.io/component: backup
spec:
  schedule: {{ .Values.backups.schedule | quote }}
  successfulJobsHistoryLimit: {{ default 1 .Values.backups.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ default 3 .Values.backups.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ include "elysia.name" . }}
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: backup
              image: {{ printf "%s:%s" .Values.backups.image.repository .Values.backups.image.tag }}
              imagePullPolicy: {{ .Values.backups.image.pullPolicy | default "IfNotPresent" }}
              env:
                - name: RETENTION_DAYS
                  value: {{ .Values.backups.retentionDays | quote }}
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  TS=$(date +%Y%m%d-%H%M%S)
                  TARGET_DIR=/backup
                  mkdir -p "$TARGET_DIR"
                  ARCHIVE="$TARGET_DIR/elysia-data-$TS.tar.gz"
                  if [ -d /data ]; then
                    echo "[INFO] Archiving /data to $ARCHIVE"; tar -czf "$ARCHIVE" -C /data .
                  else
                    echo "[WARN] /data mount missing";
                  fi
                  echo "[INFO] Pruning older than ${RETENTION_DAYS} days";
                  find "$TARGET_DIR" -type f -name 'elysia-data-*.tar.gz' -mtime +${RETENTION_DAYS} -print -delete || true
                  echo "[INFO] Backup complete";
              volumeMounts:
                - name: backup-target
                  mountPath: /backup
                - name: data
                  mountPath: /data
          volumes:
            - name: backup-target
              nfs:
                server: {{ .Values.backups.nfs.server | quote }}
                path: {{ .Values.backups.nfs.path | quote }}
            - name: data
              persistentVolumeClaim:
                claimName: {{- if and $apptemplate $apptemplate.persistence $apptemplate.persistence.data $apptemplate.persistence.data.existingClaim -}}
                  {{ $apptemplate.persistence.data.existingClaim }}
                {{- else -}}
                  {{ include "elysia.fullname" . }}-data
                {{- end }}
{{- end }}{{- if .Values.backups.enabled }}
{{- $apptemplate := index .Values "app-template" -}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "elysia.fullname" . }}-backup
  labels:
    app.kubernetes.io/name: {{ include "elysia.name" . }}
    app.kubernetes.io/component: backup
spec:
  schedule: {{ .Values.backups.schedule | quote }}
  successfulJobsHistoryLimit: {{ default 1 .Values.backups.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ default 3 .Values.backups.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ include "elysia.name" . }}
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: backup
              image: {{ printf "%s:%s" .Values.backups.image.repository .Values.backups.image.tag }}
              imagePullPolicy: {{ .Values.backups.image.pullPolicy | default "IfNotPresent" }}
              env:
                - name: RETENTION_DAYS
                  value: {{ .Values.backups.retentionDays | quote }}
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  TS=$(date +%Y%m%d-%H%M%S)
                  TARGET_DIR=/backup
                  mkdir -p "$TARGET_DIR"
                  ARCHIVE="$TARGET_DIR/elysia-data-$TS.tar.gz"
                  if [ -d /data ]; then
                    echo "[INFO] Archiving /data to $ARCHIVE"; tar -czf "$ARCHIVE" -C /data .
                  else
                    echo "[WARN] /data mount missing";
                  fi
                  echo "[INFO] Pruning older than ${RETENTION_DAYS} days";
                  find "$TARGET_DIR" -type f -name 'elysia-data-*.tar.gz' -mtime +${RETENTION_DAYS} -print -delete || true
                  echo "[INFO] Backup complete";
              volumeMounts:
                - name: backup-target
                  mountPath: /backup
                - name: data
                  mountPath: /data
          volumes:
            - name: backup-target
              nfs:
                server: {{ .Values.backups.nfs.server | quote }}
                path: {{ .Values.backups.nfs.path | quote }}
            - name: data
              persistentVolumeClaim:
                claimName: "{{ if $apptemplate.persistence.data.existingClaim }}{{ $apptemplate.persistence.data.existingClaim }}{{ else }}{{ include \"elysia.fullname\" . }}-data{{ end }}"
{{- end }}
