#!/usr/bin/env python

# WIP
# TODO clean this up

"""
Basic configure script for new users
"""

import fileinput
import subprocess
import sys
import os

from rich.prompt import Confirm, Prompt

upstream_config = {
    "seed_repo": "https://github.com/brimdor/homelab",
    "domain": "eaglepass.io",
    "timezone": "America/Chicago",
    "terraform_workspace": "brimdor",
    "loadbalancer_ip_range": "10.0.50.224/27",
    "control_plane_endpoint": "10.0.50.100"
}


def check_python_version(required_version: str) -> None:
    if sys.version_info < tuple(map(int, required_version.split('.'))):
        raise Exception(f"Must be using Python >= {required_version}")


def find_and_replace(pattern: str, replacement: str, paths: list[str]) -> None:
    files_with_matches = subprocess.run(
        ["git", "grep", "--files-with-matches", pattern, "--"] + paths,
        capture_output=True,
        text=True
    ).stdout.splitlines()

    for file_with_maches in files_with_matches:
        with fileinput.FileInput(file_with_maches, inplace=True) as file:
            for line in file:
                print(line.replace(pattern, replacement), end='')


def main() -> None:
    check_python_version(
        required_version='3.10.0'
    )
    domain = Prompt.ask("Enter your domain", default=upstream_config['domain'])
    seed_repo = Prompt.ask("Enter seed repo", default=upstream_config['seed_repo'])
    timezone = Prompt.ask("Enter time zone", default=upstream_config['timezone'])
    loadbalancer_ip_range = Prompt.ask("Enter IP range for load balancer", default=upstream_config['loadbalancer_ip_range'])
    control_plane_endpoint = Prompt.ask("Enter IP for control plane endpoint", default=upstream_config['control_plane_endpoint'])

    find_and_replace(
        pattern=upstream_config['domain'],
        replacement=domain,
        paths=[
            "scripts/configure",
            ".ci",
            "apps",
            "platform",
            "system",
            "external"
        ]
    )

    find_and_replace(
        pattern=upstream_config['seed_repo'],
        replacement=seed_repo,
        paths=[
            "scripts/configure",
            "system",
            "platform"
        ]
    )

    find_and_replace(
        pattern=upstream_config['timezone'],
        replacement=timezone,
        paths=[
            "scripts/configure",
            "apps",
            "system",
            "metal"
        ]
    )

    find_and_replace(
        pattern=upstream_config['loadbalancer_ip_range'],
        replacement=loadbalancer_ip_range,
        paths=[
            "scripts/configure",
            "metal/inventories/prod.yml",
            "apps/tailscale/values.yaml",
        ]
    )

    find_and_replace(
        pattern=upstream_config['control_plane_endpoint'],
        replacement=control_plane_endpoint,
        paths=[
            "scripts/configure",
            "metal/inventories/prod.yml"
        ]
    )

    if Confirm.ask("Update server list?", default=True):
        editor = os.getenv('EDITOR', 'nvim')
        subprocess.run(
            [editor, "metal/inventories/prod.yml"]
        )


    if Confirm.ask("Do you want to use managed services?"):
        terraform_workspace = Prompt.ask("Enter Terraform Workspace", default=upstream_config['terraform_workspace'])

        find_and_replace(
            pattern=upstream_config['terraform_workspace'],
            replacement=terraform_workspace,
            paths=[
                "scripts/configure",
                "external/versions.tf"
            ]
        )


if __name__ == '__main__':
    main()
